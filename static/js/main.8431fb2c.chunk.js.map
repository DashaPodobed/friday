{"version":3,"sources":["common/c1-SuperInputText/SuperInputText.module.css","common/c2-SuperButton/SuperButton.module.css","common/c3-SuperCheckbox/SuperCheckbox.module.css","components/c2-Login/Login.tsx","components/c1-Logup/Logup.tsx","components/c3-Profile/Profile.tsx","components/c5-PasswordRecovery/PasswordRecovery.tsx","components/с4-EnterANewPassword/EnterANewPassword.tsx","common/c2-SuperButton/SuperButton.tsx","common/c1-SuperInputText/SuperInputText.tsx","common/c3-SuperCheckbox/SuperCheckbox.tsx","components/с7-Test/Test.tsx","assets/6M513.png","components/с6-error/ErrorPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","LogIn","LogUp","Profile","PasswordRecovery","EnterANewPassword","SuperButton","red","className","restProps","finalClassName","s","default","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","value","key","SuperCheckbox","onChangeChecked","children","checkbox","checked","Test","useState","text","setText","onClick","console","log","alert","newValue","ErrorPage","src","errorImg","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8431fb2c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__WuyFe\",\"errorInput\":\"SuperInputText_errorInput__2h4-F\",\"error\":\"SuperInputText_error__2Ii1S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1Oj1f\",\"red\":\"SuperButton_red__17evz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1wekg\",\"spanClassName\":\"SuperCheckbox_spanClassName__309sz\"};","import React from \"react\";\n\nexport const LogIn = () => {\n    return (\n        <div>\n            Log In\n        </div>\n    )\n}","import React from \"react\";\n\nexport const LogUp = () => {\n    return (\n        <div>\n            Log Up\n        </div>\n    )\n}","import React from \"react\";\n\nexport const Profile = () => {\n    return (\n        <div>\n            Profile\n        </div>\n    )\n}","import React from \"react\";\n\nexport const PasswordRecovery = () => {\n    return (\n        <div>\n            Password Recovery\n        </div>\n    )\n}","import React from \"react\";\n\nexport const EnterANewPassword = () => {\n    return (\n        <div>\n            Enter A New Password\n        </div>\n    )\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\nimport s from './SuperButton.module.css'\n\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype SuperButtonPropsType = DefaultButtonPropsType & {\n    red?: boolean\n}\n\nconst SuperButton: React.FC<SuperButtonPropsType> = (\n    {\n        red, className,\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\n    }\n) => {\n    const finalClassName = `${red ? s.red : s.default} ${className}`\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\n        />\n    )\n}\n\nexport default SuperButton\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = `${s.errorInput} ${className ? s.errorInput : s.superInput} ${className} ` // need to fix with (?:) and s.superInput - done\n\n    return (\n        <>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <span className={finalSpanClassName}>{error}</span>}\n        </>\n    )\n}\n\nexport default SuperInputText\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\nimport s from './SuperCheckbox.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n}\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeChecked,\n        className, spanClassName,\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange && onChange(e)\n\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\n\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\n\n    return (\n        <label>\n            <input\n                type={'checkbox'}\n                onChange={onChangeCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    )\n}\n\nexport default SuperCheckbox\n","import React, {useState} from \"react\";\nimport SuperButton from \"../../common/c2-SuperButton/SuperButton\";\nimport SuperInputText from \"../../common/c1-SuperInputText/SuperInputText\";\nimport SuperCheckbox from \"../../common/c3-SuperCheckbox/SuperCheckbox\";\n\nexport const Test = () => {\n    const [text, setText] = useState('')\n\n    const changeText = (newValue: string) => {\n        setText(newValue)\n        console.log(text)\n    }\n    const onBtnClick = () => {\n        console.log(\"btn\")\n        alert(text)\n        setText(\"\")\n    }\n    const onChangeCheckboxValue = () => {\n        console.log(\"Checkbox\")\n    }\n    return (\n        <div>\n            <div><SuperButton onClick={onBtnClick}>add</SuperButton></div>\n            <div><SuperInputText value={text} onChangeText={changeText}/></div>\n            <div><SuperCheckbox onChange={onChangeCheckboxValue}/></div>\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/6M513.c0bc7d0b.png\";","import React from \"react\";\nimport errorImg from \"../../assets/6M513.png\"\n\nexport const ErrorPage = () => {\n\n    return (\n        <div>\n            <img src={errorImg}/>\n        </div>\n    )\n}","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nimport {LogIn} from \"./components/c2-Login/Login\";\nimport {LogUp} from \"./components/c1-Logup/Logup\";\nimport {Profile} from \"./components/c3-Profile/Profile\";\nimport {PasswordRecovery} from \"./components/c5-PasswordRecovery/PasswordRecovery\";\nimport {EnterANewPassword} from \"./components/с4-EnterANewPassword/EnterANewPassword\";\nimport {Test} from \"./components/с7-Test/Test\";\nimport {ErrorPage} from \"./components/с6-error/ErrorPage\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Route path=\"/log_in\" component={()=><LogIn/>}/>\n            <Route path=\"/log_up\" component={()=><LogUp/>}/>\n            <Route path=\"/profile\" component={()=><Profile/>}/>\n            <Route path=\"/password_recovery\" component={()=><PasswordRecovery/>}/>\n            <Route path=\"/enter_a_new_password\" component={()=><EnterANewPassword/>}/>\n            <Route path=\"/test\" component={()=><Test/>}/>\n            <Route path=\"/error404\" component={()=><ErrorPage/>}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass assets function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}